# ios/Podfile
platform :ios, '13.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "Generated.xcconfig must exist. Run 'flutter pub get' and try again."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matched = line.match(/FLUTTER_ROOT\=(.*)/)
    return matched[1].strip if matched
  end
  raise "FLUTTER_ROOT not found in Generated.xcconfig. Run 'flutter pub get' and try again."
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  # âœ… Needed for Swift pods like FirebaseCoreInternal -> GoogleUtilities
  use_modular_headers!

  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))

  post_install do |installer|
    # Minimum iOS for all pods
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      end
    end

    # Ensure Flutter adds its header search paths & settings
    flutter_additional_ios_build_settings(installer)

    # (Extra safety) Make GoogleUtilities/Firebase produce modules
    installer.pods_project.targets.each do |t|
      if t.name == 'GoogleUtilities' || t.name.start_with?('Firebase')
        t.build_configurations.each do |config|
          config.build_settings['DEFINES_MODULE'] = 'YES'
        end
      end
    end
  end
end
